// Code generated by Thrift Compiler (0.14.0). DO NOT EDIT.

package lockrpc

import(
	"bytes"
	"context"
	"reflect"
	"fmt"
	"time"
	"github.com/apache/thrift/lib/go/thrift"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = context.Background
var _ = reflect.DeepEqual
var _ = time.Now
var _ = bytes.Equal

var acqState int32 = 0
var relState int32 = 0

// Attributes:
//  - Cid
//  - RetValue
type RetType struct {
  Cid int32 `thrift:"cid,1" db:"cid" json:"cid"`
  RetValue int32 `thrift:"retValue,2" db:"retValue" json:"retValue"`
}

func NewRetType() *RetType {
  return &RetType{}
}


func (p *RetType) GetCid() int32 {
  return p.Cid
}

func (p *RetType) GetRetValue() int32 {
  return p.RetValue
}
func (p *RetType) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *RetType)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Cid = v
}
  return nil
}

func (p *RetType)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.RetValue = v
}
  return nil
}

func (p *RetType) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "retType"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *RetType) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "cid", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:cid: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.Cid)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.cid (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:cid: ", p), err) }
  return err
}

func (p *RetType) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "retValue", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:retValue: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.RetValue)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.retValue (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:retValue: ", p), err) }
  return err
}

func (p *RetType) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("RetType(%+v)", *p)
}

type LockServe interface {
  // Parameters:
  //  - ClientId
  AcquireLock(ctx context.Context, clientId int32) (r *RetType, err error)
  // Parameters:
  //  - ClientId
  ReleaseLock(ctx context.Context, clientId int32) (r *RetType, err error)
}

type LockServeClient struct {
  c thrift.TClient
}

func NewLockServeClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *LockServeClient {
  return &LockServeClient{
    c: thrift.NewTStandardClient(f.GetProtocol(t), f.GetProtocol(t)),
  }
}

func NewLockServeClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *LockServeClient {
  return &LockServeClient{
    c: thrift.NewTStandardClient(iprot, oprot),
  }
}

func NewLockServeClient(c thrift.TClient) *LockServeClient {
  return &LockServeClient{
    c: c,
  }
}

func (p *LockServeClient) Client_() thrift.TClient {
  return p.c
}
// Parameters:
//  - ClientId
func (p *LockServeClient) AcquireLock(ctx context.Context, clientId int32) (r *RetType, err error) {
  var _args0 LockServeAcquireLockArgs
  _args0.ClientId = clientId
  var _result1 LockServeAcquireLockResult

  var ret RetType
  if(acqState!=0){
    fmt.Println("[RPC Warning  ]: Client ", clientId, " have a redundant acquireLock request! Return old value...")
    ret.RetValue = acqState
    ret.Cid = clientId
    return &ret, nil
  }

  if err = p.Client_().Call(ctx, "acquireLock", &_args0, &_result1); err != nil {
    return
  }

  ret = *_result1.GetSuccess()
  acqState = ret.RetValue
  relState = 0
  return &ret, nil
}

// Parameters:
//  - ClientId
func (p *LockServeClient) ReleaseLock(ctx context.Context, clientId int32) (r *RetType, err error) {
  var _args2 LockServeReleaseLockArgs
  _args2.ClientId = clientId
  var _result3 LockServeReleaseLockResult

  var ret RetType
  if(relState!=0){
    fmt.Println("[RPC Warning  ]: Client ", clientId, " have a redundant releaseLock request! Return old value...")
    ret.RetValue = relState
    ret.Cid = clientId
    return &ret, nil
  }
  if err = p.Client_().Call(ctx, "releaseLock", &_args2, &_result3); err != nil {
    return
  }

  ret = *_result3.GetSuccess()
  relState = ret.RetValue
  acqState = 0
  return &ret, nil
}

type LockServeProcessor struct {
  processorMap map[string]thrift.TProcessorFunction
  handler LockServe
}

func (p *LockServeProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
  p.processorMap[key] = processor
}

func (p *LockServeProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
  processor, ok = p.processorMap[key]
  return processor, ok
}

func (p *LockServeProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
  return p.processorMap
}

func NewLockServeProcessor(handler LockServe) *LockServeProcessor {

  self4 := &LockServeProcessor{handler:handler, processorMap:make(map[string]thrift.TProcessorFunction)}
  self4.processorMap["acquireLock"] = &lockServeProcessorAcquireLock{handler:handler}
  self4.processorMap["releaseLock"] = &lockServeProcessorReleaseLock{handler:handler}
return self4
}

func (p *LockServeProcessor) Process(ctx context.Context, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  name, _, seqId, err := iprot.ReadMessageBegin(ctx)
  if err != nil { return false, err }
  if processor, ok := p.GetProcessorFunction(name); ok {
    return processor.Process(ctx, seqId, iprot, oprot)
  }
  iprot.Skip(ctx, thrift.STRUCT)
  iprot.ReadMessageEnd(ctx)
  x5 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function " + name)
  oprot.WriteMessageBegin(ctx, name, thrift.EXCEPTION, seqId)
  x5.Write(ctx, oprot)
  oprot.WriteMessageEnd(ctx)
  oprot.Flush(ctx)
  return false, x5

}

type lockServeProcessorAcquireLock struct {
  handler LockServe
}

func (p *lockServeProcessorAcquireLock) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := LockServeAcquireLockArgs{}
  if err = args.Read(ctx, iprot); err != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin(ctx, "acquireLock", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, err
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := LockServeAcquireLockResult{}
  var retval *RetType
  var err2 error
  if retval, err2 = p.handler.AcquireLock(ctx, args.ClientId); err2 != nil {
    tickerCancel()
    if err2 == thrift.ErrAbandonRequest {
      return false, err2
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing acquireLock: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "acquireLock", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "acquireLock", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type lockServeProcessorReleaseLock struct {
  handler LockServe
}

func (p *lockServeProcessorReleaseLock) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := LockServeReleaseLockArgs{}
  if err = args.Read(ctx, iprot); err != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin(ctx, "releaseLock", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, err
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := LockServeReleaseLockResult{}
  var retval *RetType
  var err2 error
  if retval, err2 = p.handler.ReleaseLock(ctx, args.ClientId); err2 != nil {
    tickerCancel()
    if err2 == thrift.ErrAbandonRequest {
      return false, err2
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing releaseLock: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "releaseLock", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "releaseLock", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}


// HELPER FUNCTIONS AND STRUCTURES

// Attributes:
//  - ClientId
type LockServeAcquireLockArgs struct {
  ClientId int32 `thrift:"clientId,1" db:"clientId" json:"clientId"`
}

func NewLockServeAcquireLockArgs() *LockServeAcquireLockArgs {
  return &LockServeAcquireLockArgs{}
}


func (p *LockServeAcquireLockArgs) GetClientId() int32 {
  return p.ClientId
}
func (p *LockServeAcquireLockArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *LockServeAcquireLockArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ClientId = v
}
  return nil
}

func (p *LockServeAcquireLockArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "acquireLock_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *LockServeAcquireLockArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "clientId", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:clientId: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.ClientId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.clientId (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:clientId: ", p), err) }
  return err
}

func (p *LockServeAcquireLockArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("LockServeAcquireLockArgs(%+v)", *p)
}

// Attributes:
//  - Success
type LockServeAcquireLockResult struct {
  Success *RetType `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewLockServeAcquireLockResult() *LockServeAcquireLockResult {
  return &LockServeAcquireLockResult{}
}

var LockServeAcquireLockResult_Success_DEFAULT *RetType
func (p *LockServeAcquireLockResult) GetSuccess() *RetType {
  if !p.IsSetSuccess() {
    return LockServeAcquireLockResult_Success_DEFAULT
  }
return p.Success
}
func (p *LockServeAcquireLockResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *LockServeAcquireLockResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *LockServeAcquireLockResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &RetType{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *LockServeAcquireLockResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "acquireLock_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *LockServeAcquireLockResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *LockServeAcquireLockResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("LockServeAcquireLockResult(%+v)", *p)
}

// Attributes:
//  - ClientId
type LockServeReleaseLockArgs struct {
  ClientId int32 `thrift:"clientId,1" db:"clientId" json:"clientId"`
}

func NewLockServeReleaseLockArgs() *LockServeReleaseLockArgs {
  return &LockServeReleaseLockArgs{}
}


func (p *LockServeReleaseLockArgs) GetClientId() int32 {
  return p.ClientId
}
func (p *LockServeReleaseLockArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *LockServeReleaseLockArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ClientId = v
}
  return nil
}

func (p *LockServeReleaseLockArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "releaseLock_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *LockServeReleaseLockArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "clientId", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:clientId: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.ClientId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.clientId (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:clientId: ", p), err) }
  return err
}

func (p *LockServeReleaseLockArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("LockServeReleaseLockArgs(%+v)", *p)
}

// Attributes:
//  - Success
type LockServeReleaseLockResult struct {
  Success *RetType `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewLockServeReleaseLockResult() *LockServeReleaseLockResult {
  return &LockServeReleaseLockResult{}
}

var LockServeReleaseLockResult_Success_DEFAULT *RetType
func (p *LockServeReleaseLockResult) GetSuccess() *RetType {
  if !p.IsSetSuccess() {
    return LockServeReleaseLockResult_Success_DEFAULT
  }
return p.Success
}
func (p *LockServeReleaseLockResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *LockServeReleaseLockResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *LockServeReleaseLockResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &RetType{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *LockServeReleaseLockResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "releaseLock_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *LockServeReleaseLockResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *LockServeReleaseLockResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("LockServeReleaseLockResult(%+v)", *p)
}


